Ingest
======

To obtain the latest image of `provesense-ingest`, run: 

::

   docker pull scambria/provesense-ingest
   
Note - currently provesense only supports the ingestion of RDF data in the **turtle** format 
 - https://www.w3.org/TR/turtle/

Example Data
------------
The example data below was produced by the `print_producer.py` file in the `provesense-ingest` project. This is valid data in the **turtle** format that can be ingested into provesense. Note - sensor examples are based on traptor - https://github.com/istresearch/traptor.

The snippet below is a very minimal example of a sensor observation

::

        @prefix ssn: <http://purl.oclc.org/NET/ssnx/ssn#> . 
        @prefix prov: <http://www.w3.org/ns/prov#> .
        @prefix : <http://provo.ssn.org/provesense#> .
        
        :traptor-output-1 a ssn:SensorOutput ; 
            ssn:hasValue "observationValue1"  .
        
        :twitter-observation-1 a ssn:Observation ;
            ssn:observedBy  :traptor-2904 ;
            ssn:observationResult :traptor-output-1 ;
            prov:wasAttributedTo :twitter-task-1 .                        
        

A more complex example that demonstrates an approach for tying together a sensor, an observation, and various entities, activities, agents, and an event. 

::

        @prefix ssn: <http://purl.oclc.org/NET/ssnx/ssn#> . 
        @prefix prov: <http://www.w3.org/ns/prov#> .
        @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
        @prefix : <http://provo.ssn.org/provesense#> .

        :shooting a prov:InstantaneousEvent ;
           prov:atTime "2016-06-12T02:02:00Z"^^xsd:dateTime .            

        :activity-5229 a prov:Activity . 

        :user-4948 a prov:Person, prov:entityInfluence ;
           prov:actedOnBehalfOf :activity-5229 .
                    
        :software-agent-1 a prov:SoftwareAgent, prov:entityInfluence ;
           prov:actedOnBehalfOf :activity-5229 .

        :user-task-activate-0 a :UserTaskActivate ;

        #A sensor task generated by a user activity
        :twitter-task-0 a prov:Entity ;
           prov:wasGeneratedBy :user-task-activate-0 ;
           prov:wasAttributedTo :user-0 ;
           prov:value "shooting" ;
           :task-type "keyword" .                       

        #Automated tasking based on sensor task generated above                                         
        :activate-twitter-task-0-descendants a :AutoTaskActivate ; 
           prov:startedAtTime "2016-06-12T03:30:00Z"^^xsd:dateTime ;
           prov:used :twitter-task-0 ;
           prov:wasAssociatedWith :software-agent-1 ;
           prov:generated :twitter-task-0-descendants .
                
        #Collection of auto-generated tasks derived from initial user task
        :twitter-task-0-descendants a prov:Collection, prov:Generation ;
           prov:wasGeneratedBy :activate-twitter-task-0-descendants ;
           prov:qualifiedGeneration [
              a prov:Generation, prov:InstantaneousEvent ;
              prov:atTime "2016-06-12T02:02:00Z"^^xsd:dateTime ;
              prov:activity :shooting ;
           ] . 

        #Sensor that was tasked by :twitter-task-0 and is now producing observations
        :traptor-2904 a ssn:Sensor ;
            ssn:observes  "twitter" ;
            prov:actedOnBehalfOf :twitter-task-0 .        
        
        :twitter-observation-0 a ssn:Observation ;
            ssn:observedBy  :traptor-2904 ;
            ssn:observationResult :traptor-output-0 ;
            prov:wasAttributedTo :twitter-task-0 .                        
        
        :traptor-output-0 a ssn:SensorOutput ; 
            ssn:hasValue "some tweet"  .        

                
        #A sensor task that was auto-generated by an AutoTaskActivate activity, 
        #a result influenced by the initial user sensor tasking (twitter-task-0)
        :twitter-task-34 a prov:Entity ;
           prov:wasGeneratedBy  :activate-twitter-task-34 ;
           prov:wasInfluencedBy  :twitter-task-0 ;
           prov:wasAttributedTo :software-agent-1 .
        